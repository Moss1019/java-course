/*
 * This file is generated by jOOQ.
 */
package com.mossonthetree.database.tables;


import com.mossonthetree.database.Keys;
import com.mossonthetree.database.TBLPublic;
import com.mossonthetree.database.tables.records.TBLTradeRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TBLTrade extends TableImpl<TBLTradeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trade</code>
     */
    public static final TBLTrade TRADE = new TBLTrade();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TBLTradeRecord> getRecordType() {
        return TBLTradeRecord.class;
    }

    /**
     * The column <code>public.trade.trade_id</code>.
     */
    public final TableField<TBLTradeRecord, String> TRADE_ID = createField(DSL.name("trade_id"), SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.trade.account_id</code>.
     */
    public final TableField<TBLTradeRecord, String> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>public.trade.instrument</code>.
     */
    public final TableField<TBLTradeRecord, String> INSTRUMENT = createField(DSL.name("instrument"), SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>public.trade.buy_price</code>.
     */
    public final TableField<TBLTradeRecord, Double> BUY_PRICE = createField(DSL.name("buy_price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.trade.is_open</code>.
     */
    public final TableField<TBLTradeRecord, Boolean> IS_OPEN = createField(DSL.name("is_open"), SQLDataType.BOOLEAN, this, "");

    private TBLTrade(Name alias, Table<TBLTradeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TBLTrade(Name alias, Table<TBLTradeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.trade</code> table reference
     */
    public TBLTrade(String alias) {
        this(DSL.name(alias), TRADE);
    }

    /**
     * Create an aliased <code>public.trade</code> table reference
     */
    public TBLTrade(Name alias) {
        this(alias, TRADE);
    }

    /**
     * Create a <code>public.trade</code> table reference
     */
    public TBLTrade() {
        this(DSL.name("trade"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TBLPublic.PUBLIC;
    }

    @Override
    public UniqueKey<TBLTradeRecord> getPrimaryKey() {
        return Keys.TRADE_PKEY;
    }

    @Override
    public TBLTrade as(String alias) {
        return new TBLTrade(DSL.name(alias), this);
    }

    @Override
    public TBLTrade as(Name alias) {
        return new TBLTrade(alias, this);
    }

    @Override
    public TBLTrade as(Table<?> alias) {
        return new TBLTrade(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TBLTrade rename(String name) {
        return new TBLTrade(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TBLTrade rename(Name name) {
        return new TBLTrade(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TBLTrade rename(Table<?> name) {
        return new TBLTrade(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade where(Condition condition) {
        return new TBLTrade(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TBLTrade where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TBLTrade where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TBLTrade where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TBLTrade where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TBLTrade whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
